version: "3.3"
services:
  datadog-agent:
    image: gcr.io/datadoghq/agent:latest-jmx
    environment:
      DD_API_KEY: ${DD_API_KEY}
      DD_SITE: ${DD_SITE}
      DD_HOSTNAME: dd-agent
      DD_APM_ENABLED: false
      DD_LOGS_ENABLED: true
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: true
    volumes:
      - ./datadog/datadog-agent/:/etc/datadog-agent/
      - ./datadog/datadog-agent/conf.d/:/etc/datadog-agent/conf.d
      - ./datadog/datadog-agent/checks.d/:/etc/datadog-agent/checks.d
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro

  datadog-agent-apm:
    image: gcr.io/datadoghq/agent:latest
    ports:
      - 8126:8126
    environment:
      DD_API_KEY: ${DD_API_KEY}
      DD_SITE: ${DD_SITE}
      DD_HOSTNAME: dd-apm-agent
      DD_APM_ENABLED: true
      DD_APM_NON_LOCAL_TRAFFIC: true
      DD_ENV: ${DD_ENV}
    volumes:
      - ./datadog/datadog-agent-apm/:/etc/datadog-agent/
      - ./datadog/datadog-agent-apm/conf.d/:/etc/datadog-agent/conf.d
      - ./datadog/datadog-agent-apm/checks.d/:/etc/datadog-agent/checks.d
  flask:
    build:
      context: flask
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - DD_ENV=${DD_ENV} 
      - DD_SERVICE=flask
      - DD_VERSION=1.0.0 
      - DD_AGENT_HOST=datadog-agent-apm 
      - DD_TRACE_AGENT_PORT=8126 
      - DD_LOGS_INJECTION=true 
      - DD_TRACE_DEBUG=true
    restart: 'on-failure'
    depends_on:
      - iris
      - db

  db:
    image: postgres:12
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres


  jgw:
    depends_on:
      - datadog-agent
    environment:
      - JAVA_GATEWAY
      - JVMARGS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -javaagent:/jgw/dd-java-agent.jar 
      - DD_ENV=${DD_ENV} 
      - DD_SERVICE=jgw
      - DD_VERSION=1.0.0 
      - DD_AGENT_HOST=datadog-agent-apm 
      - DD_TRACE_AGENT_PORT=8126 
      - DD_LOGS_INJECTION=true 
      - DD_TRACE_DEBUG=true
    build:
      context: java
      dockerfile: Dockerfile
      args:
        IRIS_IMAGE: ${IRIS_IMAGE}
    restart: always
    ports:
      - ${JAVA_GATEWAY}:55555
      - 5005:5005

  netgw:
    depends_on:
      - datadog-agent
    build:
      context: dotnet
      dockerfile: Dockerfile
      args:
        IRIS_IMAGE: ${IRIS_IMAGE}
    restart: always
    environment: 
      - DOTNET_GATEWAY
      - DD_ENV=${DD_ENV} 
      - DD_SERVICE=netgw
      - DD_VERSION=1.0.0 
      - DD_AGENT_HOST=datadog-agent-apm 
      - DD_TRACE_AGENT_PORT=8126 
      - DD_LOGS_INJECTION=true 
      - DD_TRACE_DEBUG=true
    ports: 
      - ${DOTNET_GATEWAY}:${DOTNET_GATEWAY}

  pygw:
    depends_on:
      - datadog-agent
    build:
      context: py
      dockerfile: Dockerfile
      args:
        IRIS_IMAGE: ${IRIS_IMAGE}
    restart: always
    environment: 
      - PYTHON_GATEWAY
      - DD_ENV=${DD_ENV} 
      - DD_SERVICE=pygw
      - DD_VERSION=1.0.0 
      - DD_AGENT_HOST=datadog-agent-apm 
      - DD_TRACE_AGENT_PORT=8126 
      - DD_LOGS_INJECTION=true 
      - DD_TRACE_DEBUG=true
    ports:
      - ${PYTHON_GATEWAY}:${PYTHON_GATEWAY}

  iris:
    init: true
    command: --check-caps false
    build:
      context: iris
      dockerfile: Dockerfile
      args:
        IRIS_IMAGE: ${IRIS_IMAGE}
    ports:
      - 57773:52773
      - 51773:1972
    labels:
      # https://github.com/DataDog/datadog-agent/issues/11436
      com.datadoghq.ad.check_names: '["openmetrics"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: |
        [
          {
            "openmetrics_endpoint": "http://%%host%%:52773/api/monitor/metrics",
            "namespace": "prometheus",
            "metrics" : [{"iris.*":{"type":"gauge"}}]
          }
        ] 

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    hostname: 'zookeeper'
    ports:
      - 2181:2181
    environment:
      - 'ZOOKEEPER_CLIENT_PORT=2181'
      - 'ZOOKEEPER_TICK_TIME=2000'
      - 'JMX_PORT=9999'
      - 'KAFKA_JMX_OPTS=-Djava.rmi.server.hostname=zookeeper -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false'

    restart: 'on-failure'

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    hostname: 'kafka'
    depends_on:
      - 'zookeeper'
      - 'datadog-agent'
    ports:
      - 9092:9092
      - 9999:9999
    environment:
      - 'KAFKA_BROKER_ID=1'
      - 'KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181'
      - 'KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://172.17.111.209:9092'
      - 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      - 'KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT'
      - 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1'
      - 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1'
      - 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1'
      - 'JMX_PORT=9999'
      - 'KAFKA_JMX_OPTS=-Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false'
    restart: 'on-failure'
    labels:
      com.datadoghq.ad.logs: '[{"source": "kafka", "service": "kafka"}]'
      com.datadoghq.ad.check_names: '["jmx"]'
      com.datadoghq.ad.init_configs: '[{"is_jmx": true, "collect_default_metrics": true}]'
      com.datadoghq.ad.instances: |
        [{"host": "%%host%%","port":"9999"}] 

networks:
  default:
    name: datadog-example
